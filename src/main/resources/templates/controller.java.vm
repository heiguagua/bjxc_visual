package ${package.Controller};

import com.baomidou.mybatisplus.plugins.Page;
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end
import ${package.Entity}.vo.${entity}Vo;
import ${package.Service}.${table.serviceName};
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;

import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import java.util.Map;

/**
 * <p>
 * ${table.comment} 前端控制器
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
@Controller
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/${table.entityPath}")
//todo 将所有的XXX修改为真实值
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end
    private Logger logger = LoggerFactory.getLogger(this.getClass());

    @Autowired
    private ${table.serviceName} service;

    @RequiresPermissions("XXX:XXX:list")
    @RequestMapping("")
    public  String init(@RequestParam Map<String , Object> paramMap){
		setCurrentMenuInfo(paramMap);
    	return "XXX/XXX/XXXList";
    }

    /**
     * 分页查询${table.comment}
     */
    @RequiresPermissions("XXX:XXX:list")
    @RequestMapping("/list")
    @ResponseBody
    public PageResult list(@RequestParam Map<String , Object> paramMap){
		PageResult pageResult = new PageResult();
		try {
		    Page<${entity}Vo> page = service.selectVoPage(paramMap);
		    pageResult.setPage(page);
		} catch (Exception e) {
		    pageResult.error("分页查询${table.comment}出错");
		    logger.error("分页查询${table.comment}出错", e);
		}
		return pageResult;
    }

    /**
     * 新增${table.comment}
     */
    @RequiresPermissions("XXX:XXX:add")
    @RequestMapping("/add")
    public  String add(){
		return "XXX/XXX/XXXAdd";
    }

    /**
     * 执行新增
     */
    @RequiresPermissions("XXX:XXX:add")
    @Log("创建${table.comment}")
    @RequestMapping("/doAdd")
    @ResponseBody
    public HandleResult doAdd(${entity}Vo entity){
		HandleResult handleResult = new HandleResult();
		try {
		    service.insertVO(entity);
		    handleResult.success("创建${table.comment}成功");
		} catch (Exception e) {
		    handleResult.error("创建${table.comment}失败");
		    logger.error("创建${table.comment}失败", e);
		}
		return handleResult;
    }

    /**
     * 删除${table.comment}
     */
    @RequiresPermissions("XXX:XXX:delete")
    @Log("删除${table.comment}")
    @RequestMapping("/delete")
    @ResponseBody
    public HandleResult delete(@RequestParam String id){
		//todo 逻辑删除
    	//service.deleteById(id);
		return new HandleResult().success("删除${table.comment}成功");
    }

    /**
     * 编辑${table.comment}
     */
    @RequiresPermissions("XXX:XXX:edit")
    @RequestMapping("/edit")
    public  String edit(@RequestParam String id,Model model){
		model.addAttribute("id",id);
		return "XXX/XXX/XXXEdit";
    }

    @RequiresPermissions("XXX:XXX:edit")
    @RequestMapping("/editLoad")
    @ResponseBody
    public  HandleResult editLoad(@RequestParam String id){
		HandleResult handleResult = new HandleResult();
		try {
            ${entity}Vo vo = service.selectVoById(id);
		    handleResult.put("vo", vo);
		} catch (Exception e) {
		    handleResult.error("获取${table.comment}信息失败");
		    logger.error("获取${table.comment}信息失败", e);
		}
		return handleResult;
		}

    /**
     * 执行编辑
     */
    @RequiresPermissions("XXX:XXX:edit")
    @Log("编辑${table.comment}")
    @RequestMapping("/doEdit")
    @ResponseBody
    public  HandleResult doEdit(${entity}Vo entity,Model model){
		HandleResult handleResult = new HandleResult();
		try {
		    service.updateVO(entity);
		    handleResult.success("编辑${table.comment}成功");
		} catch (Exception e) {
		    handleResult.error("编辑${table.comment}失败");
		    logger.error("编辑${table.comment}失败", e);
		}
		return handleResult;
    }
}
